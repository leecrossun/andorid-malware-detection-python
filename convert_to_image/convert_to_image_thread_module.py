import pandas as pd
import os, csv
from tqdm import tqdm
from PIL import Image
import numpy as np
from queue import Queue
from threading import Thread

# Calculate ASCII code to gSet index of matrix
def get_idx(op_str):
    s = ord(op_str)
    if s >= 65 and s <= 90: # A-Z
        return s - 65
    elif s >= 97 and s <= 122: # a-z
        return s - 71
    elif s >= 48 and s <= 57: # 0-9
        return s + 4
    else:
        return -1

# M1 matrix
## The unique combination of every 2 consecutive letters or numbers
def get_m1(op_str): # op_str : opcode + operands (no punctuations)
    m1 = [[0 for _ in range(62)] for _ in range(62)]
    for i in range(len(op_str)-1):
        m1[get_idx(op_str[i])][get_idx(op_str[i+1])] += 1
    return m1

# M2 matrix
## The unique combination of the first letters of every 2 consecutive opcodes in the sequence of assembly instructions
def get_m2(op_str): # opcode (splited by '|')
    m2 = [[0 for _ in range(62)] for _ in range(62)]
    op_list = op_str.split('|')
    for i in range(len(op_list)-1):
        m2[get_idx(op_list[i][0])][get_idx(op_list[i+1][0])] += 1
    return m2

# M3 matrix
## The unique combination of the last two letters in each opcode of the sequence of assembly instructions
def get_m3(op_str): # opcode (splited by '|)
    m3 = [[0 for _ in range(62)] for _ in range(62)]
    op_list = op_str.split('|')
    for op in op_list:
        m3[get_idx(op[-2])][get_idx(op[-1])] += 1
    return m3

def get_image(opcode_str, operand_str, file_name, is_malware): # get RGB image
    m1 = get_m1(operand_str)
    m2 = get_m2(opcode_str)
    m3 = get_m3(opcode_str)
    
    arr = [m1, m2, m3]
    nparr = np.array(arr).reshape(62, 62, 3)
    
    img = Image.fromarray(nparr.astype(np.uint8))
    
    if is_malware:
        save_path = '../mal_image/' + file_name + '.png'
    else:
        save_path = '../benign_image/' + file_name + '.png'
    
    img.save(save_path, 'png')
    print(save_path, 'saved')

# Thread part
def run(file_queue, is_malware):
    while not file_queue.empty():
        row = file_queue.get()
        opcode_str, operand_str, file_name = row['opcode_x'], row['opcode_y'], row['file_name']
        get_image(opcode_str, operand_str, file_name, is_malware)
        file_queue.task_done()


def convert(df, is_malware, thread_number=7):

	# Get all executable files in input directory and add them into queue
	file_queue = Queue()
	for index, row in df.iterrows():
		file_queue.put(row)

	# Start thread
	for index in range(thread_number):
		thread = Thread(target=run, args=(file_queue, is_malware))
		thread.daemon = True
		thread.start()
	file_queue.join()