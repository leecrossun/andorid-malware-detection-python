import os
import pandas as pd
import torch
import numpy as np
import torchvision
from torchvision.io import read_image

class CustomImageDataset(torch.utils.data.Dataset):
    def __init__(self, annotations_file, img_dir, transform=None, target_transform=None):
        self.img_labels = pd.read_csv(annotations_file, names=['file_name', 'label'])
        self.img_labels = self.__label_preprocessing__()
        self.img_dir = img_dir
        self.transform = transform
        self.target_transform = target_transform

    def __len__(self):
        return len(self.img_labels)

    def __getitem__(self, idx):
        img_path = os.path.join(self.img_dir, self.img_labels.iloc[idx, 0].split('.')[0] + '_RGB.png')
        try:
            image = read_image(img_path)
        except:
            print(img_path, 'is not Found')

        label = self.img_labels.iloc[idx, 1]
        
        if self.transform:
            topilimage = torchvision.transforms.ToPILImage()
            image = self.transform(topilimage(image))
        if self.target_transform:
            label = self.target_transform(label)
        
        return image, label
    
    def __label_preprocessing__(self):
        cols = self.img_labels['label'].unique()
        print('col : ', cols)
        self.img_labels = self.img_labels.replace(cols, [0,1,2,3,4,5,6])
        print(self.img_labels)
        return self.img_labels